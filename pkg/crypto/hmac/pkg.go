// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

package hmac

import (
	"cuelang.org/go/internal/core/adt"
	"cuelang.org/go/pkg/internal"
)

func init() {
	internal.Register("crypto/hmac", pkg)
}

var _ = adt.TopKind // in case the adt package isn't used

var pkg = &internal.Package{
	Funcs: map[string]func(c *internal.CallCtxt){
		"Sign": func(c *internal.CallCtxt) {

			hashName, key, data := c.String(0), c.Bytes(1), c.Bytes(2)
			if c.Do() {
				c.Ret, c.Err = Sign(hashName, key, data)
			}
		},
	},
	CUE: `{
	_
	exports: {
		Sign: {
			in: [...#Arg] & [{
				name: "hashName"
				type: string
			}, {
				name: "key"
				type: bytes | string
			}, {
				name: "data"
				type: bytes | string
			}]
			out: bytes | string
		}
		SHA512_256?: "SHA512_256"
		SHA512_224?: "SHA512_224"
		SHA512?:     "SHA512"
		SHA384?:     "SHA384"
		SHA256?:     "SHA256"
		SHA224?:     "SHA224"
		SHA1?:       "SHA1"
		MD5?:        "MD5"
	}
}`,
}
