// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

package path

import (
	"cuelang.org/go/internal/core/adt"
	"cuelang.org/go/pkg/internal"

	_ "embed"
)

func init() {
	internal.Register("path", pkg)
}

//go:embed pkg.cue
var cueDecls string

var _ = adt.TopKind // in case the adt package isn't used

var pkg = &internal.Package{
	Funcs: map[string]func(c *internal.CallCtxt){
		"Match": func(c *internal.CallCtxt) {
			pattern, name, os := c.String(0), c.String(1), c.String(2)
			if c.Do() {
				c.Ret, c.Err = Match(pattern, name, os)
			}
		},
		"Clean": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = Clean(path, os)
			}
		},
		"ToSlash": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = ToSlash(path, os)
			}
		},
		"FromSlash": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = FromSlash(path, os)
			}
		},
		"SplitList": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = SplitList(path, os)
			}
		},
		"Split": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = Split(path, os)
			}
		},
		"Join": func(c *internal.CallCtxt) {
			elem, os := c.StringList(0), c.String(1)
			if c.Do() {
				c.Ret = Join(elem, os)
			}
		},
		"Ext": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = Ext(path, os)
			}
		},
		"Resolve": func(c *internal.CallCtxt) {
			dir, sub, os := c.String(0), c.String(1), c.String(2)
			if c.Do() {
				c.Ret = Resolve(dir, sub, os)
			}
		},
		"Rel": func(c *internal.CallCtxt) {
			basepath, targpath, os := c.String(0), c.String(1), c.String(2)
			if c.Do() {
				c.Ret, c.Err = Rel(basepath, targpath, os)
			}
		},
		"Base": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = Base(path, os)
			}
		},
		"Dir": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = Dir(path, os)
			}
		},
		"IsAbs": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = IsAbs(path, os)
			}
		},
		"VolumeName": func(c *internal.CallCtxt) {
			path, os := c.String(0), c.String(1)
			if c.Do() {
				c.Ret = VolumeName(path, os)
			}
		},
	},
	CUE: cueDecls,
}
