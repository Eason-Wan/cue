// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

package net

import (
	"cuelang.org/go/internal/core/adt"
	"cuelang.org/go/pkg/internal"

	_ "embed"
)

func init() {
	internal.Register("net", pkg)
}

//go:embed pkg.cue
var cueDecls string

var _ = adt.TopKind // in case the adt package isn't used

var pkg = &internal.Package{
	Funcs: map[string]func(c *internal.CallCtxt){
		"SplitHostPort": func(c *internal.CallCtxt) {
			s := c.String(0)
			if c.Do() {
				c.Ret, c.Err = SplitHostPort(s)
			}
		},
		"JoinHostPort": func(c *internal.CallCtxt) {
			host, port := c.Value(0), c.Value(1)
			if c.Do() {
				c.Ret, c.Err = JoinHostPort(host, port)
			}
		},
		"FQDN": func(c *internal.CallCtxt) {
			s := c.String(0)
			if c.Do() {
				c.Ret = FQDN(s)
			}
		},
		"ParseIP": func(c *internal.CallCtxt) {
			s := c.String(0)
			if c.Do() {
				c.Ret, c.Err = ParseIP(s)
			}
		},
		"IPv4": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = IPv4(ip)
			}
		},
		"IP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = IP(ip)
			}
		},
		"IPCIDR": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IPCIDR(ip)
			}
		},
		"LoopbackIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = LoopbackIP(ip)
			}
		},
		"MulticastIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = MulticastIP(ip)
			}
		},
		"InterfaceLocalMulticastIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = InterfaceLocalMulticastIP(ip)
			}
		},
		"LinkLocalMulticastIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = LinkLocalMulticastIP(ip)
			}
		},
		"LinkLocalUnicastIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = LinkLocalUnicastIP(ip)
			}
		},
		"GlobalUnicastIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = GlobalUnicastIP(ip)
			}
		},
		"UnspecifiedIP": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret = UnspecifiedIP(ip)
			}
		},
		"ToIP4": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = ToIP4(ip)
			}
		},
		"ToIP16": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = ToIP16(ip)
			}
		},
		"IPString": func(c *internal.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IPString(ip)
			}
		},
	},
	CUE: cueDecls,
}
