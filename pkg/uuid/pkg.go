// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

package uuid

import (
	"cuelang.org/go/internal/core/adt"
	"cuelang.org/go/pkg/internal"
)

func init() {
	internal.Register("uuid", pkg)
}

var _ = adt.TopKind // in case the adt package isn't used

var pkg = &internal.Package{
	Funcs: map[string]func(c *internal.CallCtxt){
		"Valid": func(c *internal.CallCtxt) {

			s := c.String(0)
			if c.Do() {
				c.Ret = Valid(s)
			}
		},
		"Parse": func(c *internal.CallCtxt) {

			s := c.String(0)
			if c.Do() {
				c.Ret, c.Err = Parse(s)
			}
		},
		"ToString": func(c *internal.CallCtxt) {

			x := c.String(0)
			if c.Do() {
				c.Ret = ToString(x)
			}
		},
		"URN": func(c *internal.CallCtxt) {

			x := c.String(0)
			if c.Do() {
				c.Ret, c.Err = URN(x)
			}
		},
		"FromInt": func(c *internal.CallCtxt) {

			i := c.BigInt(0)
			if c.Do() {
				c.Ret, c.Err = FromInt(i)
			}
		},
		"ToInt": func(c *internal.CallCtxt) {

			x := c.String(0)
			if c.Do() {
				c.Ret = ToInt(x)
			}
		},
		"Variant": func(c *internal.CallCtxt) {

			x := c.String(0)
			if c.Do() {
				c.Ret, c.Err = Variant(x)
			}
		},
		"Version": func(c *internal.CallCtxt) {

			x := c.String(0)
			if c.Do() {
				c.Ret, c.Err = Version(x)
			}
		},
		"SHA1": func(c *internal.CallCtxt) {

			space, data := c.String(0), c.Bytes(1)
			if c.Do() {
				c.Ret, c.Err = SHA1(space, data)
			}
		},
		"MD5": func(c *internal.CallCtxt) {

			space, data := c.String(0), c.Bytes(1)
			if c.Do() {
				c.Ret, c.Err = MD5(space, data)
			}
		},
	},
	CUE: `{
	ns: {
		DNS:  "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
		URL:  "6ba7b811-9dad-11d1-80b4-00c04fd430c8"
		OID:  "6ba7b812-9dad-11d1-80b4-00c04fd430c8"
		X500: "6ba7b814-9dad-11d1-80b4-00c04fd430c8"
		Nil:  "00000000-0000-0000-0000-000000000000"
	}
	exports: {
		Version: {
			in: [...#Arg] & [{
				name: "x"
				type: string
			}]
			out: >=-9223372036854775808 & <=9223372036854775807 & int
		}
		Variant: {
			in: [...#Arg] & [{
				name: "x"
				type: string
			}]
			out: >=-9223372036854775808 & <=9223372036854775807 & int
		}
		URN: {
			in: [...#Arg] & [{
				name: "x"
				type: string
			}]
			out: string
		}
		ToString: {
			in: [...#Arg] & [{
				name: "x"
				type: string
			}]
			out: string
		}
		ToInt: {
			in: [...#Arg] & [{
				name: "x"
				type: string
			}]
			out: int
		}
		SHA1: {
			in: [...#Arg] & [{
				name: "space"
				type: string
			}, {
				name: "data"
				type: bytes | string
			}]
			out: string
		}
		Parse: {
			in: [...#Arg] & [{
				name: "s"
				type: string
			}]
			out: string
		}
		MD5: {
			in: [...#Arg] & [{
				name: "space"
				type: string
			}, {
				name: "data"
				type: bytes | string
			}]
			out: string
		}
		FromInt: {
			in: [...#Arg] & [{
				name: "i"
				type: int
			}]
			out: string
		}
		Valid: {
			in: [...#Arg] & [{
				name: "s"
				type: string
			}]
			out: _
		}
	}
	variants: {
		Invalid:   0
		RFC4122:   1
		Reserved:  2
		Microsoft: 3
		Future:    4
	}
}`,
}
