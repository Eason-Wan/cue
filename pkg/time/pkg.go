// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

package time

import (
	"cuelang.org/go/internal/core/adt"
	"cuelang.org/go/pkg/internal"

	_ "embed"
)

func init() {
	internal.Register("time", pkg)
}

//go:embed pkg.cue
var cueDecls string

var _ = adt.TopKind // in case the adt package isn't used

var pkg = &internal.Package{
	Funcs: map[string]func(c *internal.CallCtxt){
		"Duration": func(c *internal.CallCtxt) {
			s := c.String(0)
			if c.Do() {
				c.Ret, c.Err = Duration(s)
			}
		},
		"FormatDuration": func(c *internal.CallCtxt) {
			d := c.Int64(0)
			if c.Do() {
				c.Ret = FormatDuration(d)
			}
		},
		"ParseDuration": func(c *internal.CallCtxt) {
			s := c.String(0)
			if c.Do() {
				c.Ret, c.Err = ParseDuration(s)
			}
		},
		"Time": func(c *internal.CallCtxt) {
			s := c.String(0)
			if c.Do() {
				c.Ret, c.Err = Time(s)
			}
		},
		"Format": func(c *internal.CallCtxt) {
			value, layout := c.String(0), c.String(1)
			if c.Do() {
				c.Ret, c.Err = Format(value, layout)
			}
		},
		"FormatString": func(c *internal.CallCtxt) {
			layout, value := c.String(0), c.String(1)
			if c.Do() {
				c.Ret, c.Err = FormatString(layout, value)
			}
		},
		"Parse": func(c *internal.CallCtxt) {
			layout, value := c.String(0), c.String(1)
			if c.Do() {
				c.Ret, c.Err = Parse(layout, value)
			}
		},
		"Unix": func(c *internal.CallCtxt) {
			sec, nsec := c.Int64(0), c.Int64(1)
			if c.Do() {
				c.Ret = Unix(sec, nsec)
			}
		},
		"Split": func(c *internal.CallCtxt) {
			t := c.String(0)
			if c.Do() {
				c.Ret, c.Err = Split(t)
			}
		},
	},
	CUE: cueDecls,
}
