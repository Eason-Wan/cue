// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

// list doc comment
package list

// A Comparer specifies whether one value is strictly less than another value.
Comparer: {
	T:    _
	x:    T
	y:    T
	less: bool
}

// Ascending defines a Comparer to sort comparable values in increasing order.
//
// Example:
//     list.Sort(a, list.Ascending)
Ascending: {
	Comparer
	T: number | string
	x: T
	y: T
	// TODO: the following will be fixed when removing old-school templating.
	less: true && x < y
}

// Descending defines a Comparer to sort comparable values in decreasing order.
//
// Example:
//     list.Sort(a, list.Descending)
Descending: {
	Comparer
	T:    number | string
	x:    T
	y:    T
	less: x > y
}
funcs: Drop: {
	in: {
		#A0: [...]
		#A1: int64
	}
	out: [...]
}
funcs: FlattenN: {
	in: {
		#A0: _
		#A1: int64
	}
	out: [...]
}
funcs: Repeat: {
	in: {
		#A0: [...]
		#A1: int64
	}
	out: [...]
}
funcs: Concat: {
	in: #A0: [...]
	out: [...]
}
funcs: Take: {
	in: {
		#A0: [...]
		#A1: int64
	}
	out: [...]
}
funcs: Slice: {
	in: {
		#A0: [...]
		#A1: int64
		#A2: int64
	}
	out: [...]
}
funcs: MinItems: {
	in: {
		#A0: [...]
		#A1: int64
	}
	out: bool
}
funcs: MaxItems: {
	in: {
		#A0: [...]
		#A1: int64
	}
	out: bool
}
funcs: UniqueItems: {
	in: #A0: [...]
	out: bool
}
funcs: Contains: {
	in: {
		#A0: [...]
		#A1: _
	}
	out: bool
}
funcs: Avg: {
	in: #A0: [... number]
	out: number
}
funcs: Max: {
	in: #A0: [... number]
	out: number
}
funcs: Min: {
	in: #A0: [... number]
	out: number
}
funcs: Product: {
	in: #A0: [... number]
	out: number
}
funcs: Range: {
	in: {
		#A0: number
		#A1: number
		#A2: number
	}
	out: [... number]
}
funcs: Sum: {
	in: #A0: [... number]
	out: number
}
funcs: Sort: {
	in: {
		#A0: [...]
		#A1: _
	}
	out: [...]
}
funcs: SortStable: {
	in: {
		#A0: [...]
		#A1: _
	}
	out: [...]
}
funcs: SortStrings: {
	in: #A0: [... string]
	out: [... string]
}
funcs: IsSorted: {
	in: {
		#A0: [...]
		#A1: _
	}
	out: bool
}
funcs: IsSortedStrings: {
	in: #A0: [... string]
	out: bool
}
